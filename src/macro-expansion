/* TSON+: Typed JSON with some syntax improvement */

corresponding structures:
Macro Arg                   Macro Call
Macro.args              <=> SExpr (macro call)
specified number        <=> specified number
specified string        <=> specified string
specified Var           <=> specified Var
MacroArgStruct token    <=> number | string | Var
MacroArgStruct number   <=> number
MacroArgStruct string   <=> string
MacroArgStruct ident    <=> Var
MacroArgParen '('       <=> SExpr
MacroArgParen '['       <=> ListExpr
MacroArgParen '{'       <=> DictExpr

MacroArgSection
MacroArgSelector
MacroArgRepeat


Macro(example) {
    (args) [
        number(num),
        MacroArgParen type='(' [
            ident "for",
            MacroArgSelector [
                MacroArgSection(for-range) [
                    MacroArgStruct(iter) "ident",
                    ident "in",
                    MacroArgStruct(range) "expr",
                ],
                MacroArgSection(for-count) [
                    MacroArgStruct(init) "expr",
                    ident ";",
                    MacroArgStruct(cond) "expr",
                    ident ";",
                    MacroArgStruct(incre) "expr",
                ],
            ],
            MacroArgStruct(expr) "expr",
        ],
    ]
}

SExpr [
    number 1,
    SExpr [
        ident "for",
        SExpr [
            ident "i",
            ident "in",
            ListExpr [...],
        ],
        SExpr [...],
    ],
]


/^select!\s+(?cols:\S)from(?table:\S)\s+(where\s+(?pred:\E))?$/
(macro (select! %cols{string}%+ from %table{string} %(where %pred{expr})%?)
    (do
        (let table (orm-read-all %table))
        (let table (filter table (\ row (select %%cols table))))
        (%if (%exists %pred)
            (filter table %pred)
            table
        )
    )
)

ATOM struct+ ATOM struct (ATOM struct)?

(select! "name" "gender" "age" from "students" where (\ row (= (get "gender" row) "female")))

Macro(select!) args=[
    MacroArgRepeat(cols) "+" {
        MacroArgStruct "string"
    }
    ident "from"
    MacroArgStruct(table) "string"
    MacroArgRepeat "?" {
        MacroArgSection {
            ident "where"
            MacroArgStruct(pred) "expr"
        }
    }
]

SExpr [
    -- ident "select!"
    string "name"
    string "gender"
    string "age"
    ident "from"
    string "students"
    ident "where"
    ExprLambda {...}
]


Disambiguation

  /a.*a/ matches "a---aa---a": "a---a" and "a---a", but not "a---aa---a", i.e. /a.*a/ = /a.*?a/. e.g. Quotes of string literals.
  /a.*b/ matches "a--a--b--b": "a--a--b--b" and "a--b", but not "a--a--b". e.g. Parenthesis.


Simplification

  Selector reduction
    Selectors are left associated and have the same precedence, e.g. c+* = (c+)*
    c++ = c+
    c+* = c*
    c*+ = c*
    c** = c*
    c?? = c?
    c+? = c*
    c*? = c*
    c?+ = c*
    c?* = c*

  Redundant pattern
    (b*)b = b+
    b(b*) = b+
    b*b*  = b*
    b+b*  = b+
    b+b+  = bb+
    b*b+  = b+
    b?b+  = b+
    b?b*  = b*
    b*b?  = b*
    b+b?  = b+
