1.0
(println "Hello, world!")
(println"Hello, world!")
(123.123 "Hello, world!")
(123.123abc "Hello, world!")
(+ 1 2)

(let x 1)
(let x (do (+ 1 2) (print "3") (f (g x) i)))
(let (f x) (do (\ () 1) (\ (x) 1) (\ (x y) 1)))

[1 2 (f x) k [j k]]

{
  (1 [2])
  ([3] 4)
  (
    {(5 6)}
    7
  )
}


(let (proto keys)
  ; check every key is a string
  { ("keys" keys) }
)

(macro (proto! %keys{ident}*) (proto (%list (%map %keys %str))))

(let (new proto dict) (
  (if (contains (get proto "keys") (keys dict))
      (set dict "proto" proto)
      (error "[new proto error]: extra fields"))
))

(macro (new! proto %pairs({ %key{token} : %value{token} })*) (
  (%if (%empty %pairs)
       (new proto)
       (%let %H (%head %pairs)
       (%let %T (%tail %pairs)
       (do
         (let dict (new! proto %T))
         (set dict (%get %H %key) )
       ))))
))
